// <auto-generated />
using System;
using DataAccess.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataAccess.Migrations
{
    [DbContext(typeof(OnlineMovieDBContext))]
    [Migration("20240221180937_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DataAccess.Data.Entities.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("Name");

                    b.ToTable("Country", t =>
                        {
                            t.HasCheckConstraint("Name_check", "[Name] <> ''");
                        });

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Україна"
                        },
                        new
                        {
                            Id = 2,
                            Name = "США"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Китай"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Індія"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Бразилія"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Німеччина"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Японія"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Франція"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Канада"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Італія"
                        },
                        new
                        {
                            Id = 11,
                            Name = "Австралія"
                        },
                        new
                        {
                            Id = 12,
                            Name = "Іспанія"
                        },
                        new
                        {
                            Id = 13,
                            Name = "Мексика"
                        },
                        new
                        {
                            Id = 14,
                            Name = "Південна Корея"
                        },
                        new
                        {
                            Id = 15,
                            Name = "Індонезія"
                        },
                        new
                        {
                            Id = 16,
                            Name = "Нідерланди"
                        },
                        new
                        {
                            Id = 17,
                            Name = "Польща"
                        },
                        new
                        {
                            Id = 18,
                            Name = "Швеція"
                        },
                        new
                        {
                            Id = 19,
                            Name = "Швейцарія"
                        },
                        new
                        {
                            Id = 20,
                            Name = "Британія"
                        },
                        new
                        {
                            Id = 21,
                            Name = "Шотландія"
                        });
                });

            modelBuilder.Entity("DataAccess.Data.Entities.Feedback", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("MovieId")
                        .HasColumnType("int");

                    b.Property<double>("Rating")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValue(0.0);

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("MovieId");

                    b.HasIndex("UserId");

                    b.ToTable("Feedback", t =>
                        {
                            t.HasCheckConstraint("Text_check", "[Text] <> ''");
                        });

                    b.HasData(
                        new
                        {
                            Id = 1,
                            MovieId = 1,
                            Rating = 0.0,
                            Text = "Чудовий фільм",
                            UserId = "d1901b2435594da2a255db13fc57509b"
                        },
                        new
                        {
                            Id = 2,
                            MovieId = 1,
                            Rating = 0.0,
                            Text = "Фільм дуже сподобався",
                            UserId = "c86dc56aedf549f6afe5ceb4d414ebf1"
                        });
                });

            modelBuilder.Entity("DataAccess.Data.Entities.Genre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("Name");

                    b.ToTable("Genre", t =>
                        {
                            t.HasCheckConstraint("Name_check", "[Name] <> ''")
                                .HasName("Name_check1");
                        });

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Екшн"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Пригоди"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Комедія"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Драма"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Жахи"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Фентезі"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Фантастика"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Романтика"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Трилер"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Кримінал"
                        },
                        new
                        {
                            Id = 11,
                            Name = "Вестерн"
                        },
                        new
                        {
                            Id = 12,
                            Name = "Воєнний"
                        },
                        new
                        {
                            Id = 13,
                            Name = "Документальний"
                        },
                        new
                        {
                            Id = 14,
                            Name = "Містика"
                        },
                        new
                        {
                            Id = 15,
                            Name = "Мюзикл"
                        },
                        new
                        {
                            Id = 16,
                            Name = "Аніме"
                        },
                        new
                        {
                            Id = 17,
                            Name = "Спорт"
                        },
                        new
                        {
                            Id = 18,
                            Name = "Історичний"
                        },
                        new
                        {
                            Id = 19,
                            Name = "Біографія"
                        },
                        new
                        {
                            Id = 20,
                            Name = "Детектив"
                        },
                        new
                        {
                            Id = 21,
                            Name = "Хоррор"
                        },
                        new
                        {
                            Id = 22,
                            Name = "Мелодрама"
                        });
                });

            modelBuilder.Entity("DataAccess.Data.Entities.Image", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("Name");

                    b.ToTable("Image", t =>
                        {
                            t.HasCheckConstraint("Name_check", "[Name] <> ''")
                                .HasName("Name_check2");
                        });

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "78f6bd3dff214a149d2b819d2bb2f596.jpg"
                        },
                        new
                        {
                            Id = 2,
                            Name = "e8709c9c252c4d0680054104be5d200a.jpg"
                        },
                        new
                        {
                            Id = 3,
                            Name = "9d02da5822204216838b18237d0752bc.jpg"
                        },
                        new
                        {
                            Id = 4,
                            Name = "cadc26fad170460196200194d40a718a.jpg"
                        },
                        new
                        {
                            Id = 5,
                            Name = "9a43056743774ef592a36559134f5be2.jpg"
                        },
                        new
                        {
                            Id = 6,
                            Name = "d14d399aa31d45678ad8cb2b317d6d5b.jpg"
                        },
                        new
                        {
                            Id = 7,
                            Name = "342c6b26fb544d43914ad1060677b2b8.jpg"
                        });
                });

            modelBuilder.Entity("DataAccess.Data.Entities.Movie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MovieUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("OriginalName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Poster")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("noposter.jpeg");

                    b.Property<int>("PremiumId")
                        .HasColumnType("int");

                    b.Property<int>("QualityId")
                        .HasColumnType("int");

                    b.Property<string>("TrailerUrl")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("PremiumId");

                    b.HasIndex("QualityId");

                    b.ToTable("Movie", t =>
                        {
                            t.HasCheckConstraint("MovieUrl_check", "[MovieUrl] <> ''");

                            t.HasCheckConstraint("Name_check", "[Name] <> ''")
                                .HasName("Name_check3");

                            t.HasCheckConstraint("OriginalName_check", "[OriginalName] <> ''");
                        });

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CountryId = 2,
                            Date = new DateTime(1995, 4, 25, 2, 57, 0, 0, DateTimeKind.Unspecified),
                            Description = "Фільм, що розповідає про боротьбу Шотландського королівства за незалежність проти англійського панування. Головний герой фільму — Вільям Воллес, ватажок шотландців, у виконанні Мела Гібсона.одії фільму починаються 1280 року. Це історія легендарного національного шотландського героя Вільяма Воллеса, який присвятив себе боротьбі з англійцями за часів короля Едуарда Довгоногого. Вільям рано втратив батька, що загинув від рук англійців, але його дядько зумів дати хлопцеві навчання в Європі. На батьківщину Вільям повертається вже дорослим чоловіком, що мріє завести родину і жити мирним життям. Та доля вирішила інакше. Його наречену вбили англійці, і він почав свій «хрестовий похід» за свободу.",
                            MovieUrl = "https://pixel.stream.voidboost.cc/c856f28d3535c356286e0fb2128b2cd4:2024022021:43f8ed35-e4ad-4d7d-bd42-7a4fe8d4055e/7/8/1/6/3/byf31.mp4",
                            Name = "Хоробре серце",
                            OriginalName = "Braveheart",
                            Poster = "82ff372d46f44895af282106fe13a201.jpg",
                            PremiumId = 1,
                            QualityId = 3,
                            TrailerUrl = "https://www.youtube.com/watch?v=277chVHPQSA&t=39s"
                        });
                });

            modelBuilder.Entity("DataAccess.Data.Entities.MovieGenre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("GenreId")
                        .HasColumnType("int");

                    b.Property<int>("MovieId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GenreId");

                    b.HasIndex("MovieId");

                    b.ToTable("MovieGenre");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            GenreId = 18,
                            MovieId = 1
                        },
                        new
                        {
                            Id = 2,
                            GenreId = 4,
                            MovieId = 1
                        },
                        new
                        {
                            Id = 3,
                            GenreId = 2,
                            MovieId = 1
                        });
                });

            modelBuilder.Entity("DataAccess.Data.Entities.MovieImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ImageId")
                        .HasColumnType("int");

                    b.Property<int>("MovieId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ImageId");

                    b.HasIndex("MovieId");

                    b.ToTable("MovieImage");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ImageId = 1,
                            MovieId = 1
                        },
                        new
                        {
                            Id = 2,
                            ImageId = 2,
                            MovieId = 1
                        },
                        new
                        {
                            Id = 3,
                            ImageId = 3,
                            MovieId = 1
                        },
                        new
                        {
                            Id = 4,
                            ImageId = 4,
                            MovieId = 1
                        },
                        new
                        {
                            Id = 5,
                            ImageId = 5,
                            MovieId = 1
                        },
                        new
                        {
                            Id = 6,
                            ImageId = 6,
                            MovieId = 1
                        },
                        new
                        {
                            Id = 7,
                            ImageId = 7,
                            MovieId = 1
                        });
                });

            modelBuilder.Entity("DataAccess.Data.Entities.Premium", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("Rate")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Name");

                    b.ToTable("Premium", t =>
                        {
                            t.HasCheckConstraint("Name_check", "[Name] <> ''")
                                .HasName("Name_check4");
                        });

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Free",
                            Rate = 0
                        },
                        new
                        {
                            Id = 2,
                            Name = "Light",
                            Rate = 20
                        },
                        new
                        {
                            Id = 3,
                            Name = "Midle",
                            Rate = 40
                        },
                        new
                        {
                            Id = 5,
                            Name = "Full",
                            Rate = 60
                        });
                });

            modelBuilder.Entity("DataAccess.Data.Entities.Quality", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("Name");

                    b.ToTable("Quality", t =>
                        {
                            t.HasCheckConstraint("Name_check", "[Name] <> ''")
                                .HasName("Name_check5");
                        });

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Web-DL"
                        },
                        new
                        {
                            Id = 2,
                            Name = "1080p"
                        },
                        new
                        {
                            Id = 3,
                            Name = "720p"
                        },
                        new
                        {
                            Id = 5,
                            Name = "480p"
                        },
                        new
                        {
                            Id = 6,
                            Name = "2K"
                        },
                        new
                        {
                            Id = 7,
                            Name = "4K"
                        },
                        new
                        {
                            Id = 8,
                            Name = "8K"
                        });
                });

            modelBuilder.Entity("DataAccess.Data.Entities.Staf", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Birthdate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageName")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasDefaultValue("nophoto.jpeg");

                    b.Property<bool>("IsOscar")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Staf", t =>
                        {
                            t.HasCheckConstraint("Name_check", "[Name] <> ''")
                                .HasName("Name_check6");

                            t.HasCheckConstraint("Surname_check", "[Surname] <> ''");
                        });

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Birthdate = new DateTime(1956, 1, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CountryId = 2,
                            Description = "Народився 3 січня 1956 року.\r\n\r\nСин ірландців-католиків Гаттона Гібсона та Ен Райлі Гібсон, яка народилася в парафії Колм-Кіллє графства Лонгфорд, Ірландія. Його бабця по батькові Ева Майлот була австралійською оперною співачкою. Мел народився у місті Пікскілл (округ Вестчестер, штат Нью-Йорк) і був шостим з одинадцяти дітей. Один із молодших братів Мела, Донал, також актор.",
                            ImageName = "d5d49574945f45c8be24f00cc02923af.webp",
                            IsOscar = true,
                            Name = "Мел",
                            Surname = "Гибсон"
                        },
                        new
                        {
                            Id = 2,
                            Birthdate = new DateTime(1963, 9, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CountryId = 21,
                            Description = "Народився у сім'ї лікаря. У дитинстві подорожував між трьома країнами — Філіппінами, Сингапуром і Францією. Вищу освіту Енгус отримав у стінах Університету Единбурга, Шотландія. Паралельно з гризенням граніту науки молодий чоловік відвідував заняття в Центральній школі Мовлення та Драми в Лондоні, Англія.",
                            ImageName = "da0240d0882b4ec1942342ec6cf72505.jpg",
                            IsOscar = false,
                            Name = "Енгус",
                            Surname = "Макфадьєн"
                        },
                        new
                        {
                            Id = 3,
                            Birthdate = new DateTime(1966, 11, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CountryId = 8,
                            Description = "Народилася 17 листопада 1966 року в Париж, Франція.\r\n\r\nПрославилася підлітком, дебютувавши у «Вечірці» (La Boum, 1980). Вдало знайдений образ «ідеальної французької дівчини», якою Марсо визнали за підсумками глядацького опитування, було розмножено у фільмах «Вечірка-2» (фр. La Boum 2, 1982), «Щасливого Великодня» (1984), «Студентка» (1988), «Аромат кохання. Фанфан» (1993) тощо. Актрису часто залучали до найамбітніших проектів національної кіноіндустрії: «Форт Саґан», «Шуани!», «Дочка Д'Артаньяна», де вона втілювала ідеальну француженку, перетворившись із чарівного підлітка на одну з найкрасивіших актрис світового кіно.\r\n\r\n1999 року зіграла дівчину Бонда у черговому, 19-му за ліком, епізоді Бондіани — підступну, але дуже вразливу Електру Кінґ. Продовжує активно зніматися.",
                            ImageName = "c9b0972dd8b6431193cd50e9c272416f.jpg",
                            IsOscar = false,
                            Name = "Софі",
                            Surname = "Марсо"
                        });
                });

            modelBuilder.Entity("DataAccess.Data.Entities.StafMovie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("MovieId")
                        .HasColumnType("int");

                    b.Property<int>("StafId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MovieId");

                    b.HasIndex("StafId");

                    b.ToTable("StafMovie");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            MovieId = 1,
                            StafId = 1
                        },
                        new
                        {
                            Id = 2,
                            MovieId = 1,
                            StafId = 2
                        },
                        new
                        {
                            Id = 3,
                            MovieId = 1,
                            StafId = 3
                        });
                });

            modelBuilder.Entity("DataAccess.Data.Entities.StafRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("Name");

                    b.ToTable("StafRole", t =>
                        {
                            t.HasCheckConstraint("Name_check", "[Name] <> ''")
                                .HasName("Name_check7");
                        });

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Режисер"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Актор"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Оператор"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Продюсер"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Автор сценарію"
                        });
                });

            modelBuilder.Entity("DataAccess.Data.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("Birthdate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<DateTime>("PremiumDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("PremiumId")
                        .HasColumnType("int");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("PremiumId");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "f66e492517d7414495e988c4c50fd107",
                            AccessFailedCount = 0,
                            Birthdate = new DateTime(1998, 1, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "b88d682f-7491-4419-89f7-dc950763fc3c",
                            Email = "Admin@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "Петро",
                            NormalizedUserName = "ADMIN@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEF23O0cX303SgShtP+FddMMYeiAe0/aRQ2my9xNNOrNnZOJbjfsr/0bvGVwsZGLeqw==",
                            PhoneNumberConfirmed = false,
                            PremiumDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PremiumId = 1,
                            SecurityStamp = "b89ff03f-fec7-4360-93bb-3c0de58823b5",
                            Surname = "Левак",
                            TwoFactorEnabled = false,
                            UserName = "Admin@gmail.com"
                        },
                        new
                        {
                            Id = "d1901b2435594da2a255db13fc57509b",
                            AccessFailedCount = 0,
                            Birthdate = new DateTime(1988, 10, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "c6033a0b-4e62-4f2b-a19a-5cde3222fd76",
                            Email = "User1@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "Iван",
                            NormalizedUserName = "USER1@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEDhHD7zHQzwRcM4L5jHQbG0a/H4Mq+YwK+pDMDIm7MHr56XcuZqK5pNIS3bKjobXMA==",
                            PhoneNumberConfirmed = false,
                            PremiumDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PremiumId = 1,
                            SecurityStamp = "aacf966f-b3da-46d4-a275-31cb88e67c1f",
                            Surname = "Калита",
                            TwoFactorEnabled = false,
                            UserName = "User1@gmail.com"
                        },
                        new
                        {
                            Id = "c86dc56aedf549f6afe5ceb4d414ebf1",
                            AccessFailedCount = 0,
                            Birthdate = new DateTime(2000, 11, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "3a9dc195-3f5f-4ef6-bd01-407997acd4f4",
                            Email = "User2@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "Петро",
                            NormalizedUserName = "USER2@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEGTH1yzV4A4Ja3NesupAfRxDA2fqYJM8oWFy/jVXPcGIcwwgKhUKTS2EHeW0EfO5qw==",
                            PhoneNumberConfirmed = false,
                            PremiumDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PremiumId = 2,
                            SecurityStamp = "a7786a38-1a27-43bb-b18c-946d1c46670d",
                            Surname = "Дякуленко",
                            TwoFactorEnabled = false,
                            UserName = "User2@gmail.com"
                        },
                        new
                        {
                            Id = "028582c83a914a45b330b5234f4131fb",
                            AccessFailedCount = 0,
                            Birthdate = new DateTime(1999, 7, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "3e146ccf-33e8-4d8b-993a-3c2585f14ce3",
                            Email = "User3@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "Олег",
                            NormalizedUserName = "USER3@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAELF/pPd2KolZ5RWbFA40voYXzV8O78xRWs9IAbNLG9s3FJYsy6nZnh69sx69QDmAuw==",
                            PhoneNumberConfirmed = false,
                            PremiumDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PremiumId = 3,
                            SecurityStamp = "693ab32b-602a-4ee4-8340-1fade105bc8f",
                            Surname = "Панасенко",
                            TwoFactorEnabled = false,
                            UserName = "User3@gmail.com"
                        },
                        new
                        {
                            Id = "eb05f9548a2c4cf8adcc2be7305fc732",
                            AccessFailedCount = 0,
                            Birthdate = new DateTime(2001, 6, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "87b0728c-107b-45e1-a21a-d32d7eb6d53b",
                            Email = "User4@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "Тимофій",
                            NormalizedUserName = "USER4@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEDgKlwTa9TBi0QSmSnL1uRQLXAqpKIaRQP8ZwRgR5Tbdr7TaA2qzZdyFxbv3wT1Gmw==",
                            PhoneNumberConfirmed = false,
                            PremiumDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PremiumId = 2,
                            SecurityStamp = "b437218a-a199-462b-aec3-fc50da481190",
                            Surname = "Гнатенко",
                            TwoFactorEnabled = false,
                            UserName = "User4@gmail.com"
                        });
                });

            modelBuilder.Entity("DataAccess.Data.Entities.UserMovie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("MovieId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("MovieId");

                    b.HasIndex("UserId");

                    b.ToTable("UserMovie");
                });

            modelBuilder.Entity("DataAccess.Data.StafStafRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("StafId")
                        .HasColumnType("int");

                    b.Property<int>("StafRoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StafId");

                    b.HasIndex("StafRoleId");

                    b.ToTable("StafStafRole");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            StafId = 1,
                            StafRoleId = 1
                        },
                        new
                        {
                            Id = 2,
                            StafId = 1,
                            StafRoleId = 2
                        },
                        new
                        {
                            Id = 3,
                            StafId = 1,
                            StafRoleId = 4
                        },
                        new
                        {
                            Id = 4,
                            StafId = 2,
                            StafRoleId = 2
                        },
                        new
                        {
                            Id = 5,
                            StafId = 3,
                            StafRoleId = 2
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "15b04d9eff654d8d966a172db59e2722",
                            ConcurrencyStamp = "15b04d9eff654d8d966a172db59e2722",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "59139483f3d1417db1efee50d14b6a7f",
                            ConcurrencyStamp = "59139483f3d1417db1efee50d14b6a7f",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "f66e492517d7414495e988c4c50fd107",
                            RoleId = "15b04d9eff654d8d966a172db59e2722"
                        },
                        new
                        {
                            UserId = "d1901b2435594da2a255db13fc57509b",
                            RoleId = "59139483f3d1417db1efee50d14b6a7f"
                        },
                        new
                        {
                            UserId = "c86dc56aedf549f6afe5ceb4d414ebf1",
                            RoleId = "59139483f3d1417db1efee50d14b6a7f"
                        },
                        new
                        {
                            UserId = "028582c83a914a45b330b5234f4131fb",
                            RoleId = "59139483f3d1417db1efee50d14b6a7f"
                        },
                        new
                        {
                            UserId = "eb05f9548a2c4cf8adcc2be7305fc732",
                            RoleId = "59139483f3d1417db1efee50d14b6a7f"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("DataAccess.Data.Entities.Feedback", b =>
                {
                    b.HasOne("DataAccess.Data.Entities.Movie", "Movie")
                        .WithMany("Feedbacks")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DataAccess.Data.Entities.User", "User")
                        .WithMany("Feedbacks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Movie");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DataAccess.Data.Entities.Movie", b =>
                {
                    b.HasOne("DataAccess.Data.Entities.Country", "Country")
                        .WithMany("Movies")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccess.Data.Entities.Premium", "Premium")
                        .WithMany("Movies")
                        .HasForeignKey("PremiumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccess.Data.Entities.Quality", "Quality")
                        .WithMany("Movies")
                        .HasForeignKey("QualityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");

                    b.Navigation("Premium");

                    b.Navigation("Quality");
                });

            modelBuilder.Entity("DataAccess.Data.Entities.MovieGenre", b =>
                {
                    b.HasOne("DataAccess.Data.Entities.Genre", "Genre")
                        .WithMany("MovieGenres")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DataAccess.Data.Entities.Movie", "Movie")
                        .WithMany("MovieGenres")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Genre");

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("DataAccess.Data.Entities.MovieImage", b =>
                {
                    b.HasOne("DataAccess.Data.Entities.Image", "Image")
                        .WithMany("MovieImages")
                        .HasForeignKey("ImageId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DataAccess.Data.Entities.Movie", "Movie")
                        .WithMany("MovieImages")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Image");

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("DataAccess.Data.Entities.Staf", b =>
                {
                    b.HasOne("DataAccess.Data.Entities.Country", "Country")
                        .WithMany("Stafs")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("DataAccess.Data.Entities.StafMovie", b =>
                {
                    b.HasOne("DataAccess.Data.Entities.Movie", "Movie")
                        .WithMany("StafMovies")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DataAccess.Data.Entities.Staf", "Staf")
                        .WithMany("StafMovies")
                        .HasForeignKey("StafId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Movie");

                    b.Navigation("Staf");
                });

            modelBuilder.Entity("DataAccess.Data.Entities.User", b =>
                {
                    b.HasOne("DataAccess.Data.Entities.Premium", "Premium")
                        .WithMany("Users")
                        .HasForeignKey("PremiumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Premium");
                });

            modelBuilder.Entity("DataAccess.Data.Entities.UserMovie", b =>
                {
                    b.HasOne("DataAccess.Data.Entities.Movie", "Movie")
                        .WithMany("UserMovies")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DataAccess.Data.Entities.User", "User")
                        .WithMany("UserMovies")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Movie");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DataAccess.Data.StafStafRole", b =>
                {
                    b.HasOne("DataAccess.Data.Entities.Staf", "Staf")
                        .WithMany("StafStafRoles")
                        .HasForeignKey("StafId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccess.Data.Entities.StafRole", "StafRole")
                        .WithMany("StafStafRoles")
                        .HasForeignKey("StafRoleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Staf");

                    b.Navigation("StafRole");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("DataAccess.Data.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("DataAccess.Data.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccess.Data.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("DataAccess.Data.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DataAccess.Data.Entities.Country", b =>
                {
                    b.Navigation("Movies");

                    b.Navigation("Stafs");
                });

            modelBuilder.Entity("DataAccess.Data.Entities.Genre", b =>
                {
                    b.Navigation("MovieGenres");
                });

            modelBuilder.Entity("DataAccess.Data.Entities.Image", b =>
                {
                    b.Navigation("MovieImages");
                });

            modelBuilder.Entity("DataAccess.Data.Entities.Movie", b =>
                {
                    b.Navigation("Feedbacks");

                    b.Navigation("MovieGenres");

                    b.Navigation("MovieImages");

                    b.Navigation("StafMovies");

                    b.Navigation("UserMovies");
                });

            modelBuilder.Entity("DataAccess.Data.Entities.Premium", b =>
                {
                    b.Navigation("Movies");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("DataAccess.Data.Entities.Quality", b =>
                {
                    b.Navigation("Movies");
                });

            modelBuilder.Entity("DataAccess.Data.Entities.Staf", b =>
                {
                    b.Navigation("StafMovies");

                    b.Navigation("StafStafRoles");
                });

            modelBuilder.Entity("DataAccess.Data.Entities.StafRole", b =>
                {
                    b.Navigation("StafStafRoles");
                });

            modelBuilder.Entity("DataAccess.Data.Entities.User", b =>
                {
                    b.Navigation("Feedbacks");

                    b.Navigation("UserMovies");
                });
#pragma warning restore 612, 618
        }
    }
}
